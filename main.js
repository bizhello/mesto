(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}e.d({},{H:()=>J,k:()=>H});var r=function(){function e(t,r,o,i,a,u,c,l,s){var p=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n(this,"_setListener",(function(){p.view.querySelector(".element__like").addEventListener("click",p._handleLikeCard),p.view.querySelector(".element__trash").addEventListener("click",p._handleDeleteIconClick),p._cardImage.addEventListener("click",p._handleCardClick)})),n(this,"createCard",(function(){return p.view=p._template.content.cloneNode(!0).querySelector(".element"),p._cardImage=p.view.querySelector(".element__photo"),p.view.querySelector(".element__title").textContent=p._elementTitle,p._cardImage.alt=p._elementTitle,p._cardImage.src=p._elementPhoto,p.view.querySelector(".element__number").textContent=p._numberLikes,p._setListener(),void 0!==p._likes&&p._likes.forEach((function(e){e._id===H&&p.view.querySelector(".element__like").classList.add("element__like_active")})),H!==p._ownerId&&(p.view.querySelector(".element__trash").style.display="none"),null==p._ownerId&&(p.view.querySelector(".element__trash").style.display="block"),p.view})),this._elementTitle=t,this._elementPhoto=r,this._template=document.querySelector(o),this._handleCardClick=i,this._numberLikes=a,this._ownerId=u,this._likes=c,this._handleDeleteIconClick=l,this._handleLikeCard=s}var r,o;return r=e,(o=[{key:"removeElement",value:function(){this.view.remove(),this.view=null}}])&&t(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),e}(),o={nameError:"popup__name_error",buttonInvalid:"popup__button_invalid",buttonValid:"popup__button_valid",buttonSubmit:".popup__button"};function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"_handleFormSubmit",(function(e){e.preventDefault()})),a(this,"_handleFormInput",(function(e){var t=e.target;r._setCustomError(t),r.setSubmitButtonState()})),a(this,"_setCustomError",(function(e){e.validity.valid?(e.classList.remove(r._config.nameError),document.querySelector("#".concat(e.id,"-error")).textContent=""):(e.classList.add(r._config.nameError),document.querySelector("#".concat(e.id,"-error")).textContent=e.validationMessage)})),a(this,"setSubmitButtonState",(function(){r._formElement.checkValidity()?(r._button.classList.remove(r._config.buttonInvalid),r._button.classList.add(r._config.buttonValid),r._button.removeAttribute("disabled")):(r._button.classList.add(r._config.buttonInvalid),r._button.classList.remove(r._config.buttonValid),r._button.setAttribute("disabled","true"))})),this._config=t,this._formElement=n,this._button=this._formElement.querySelector(this._config.buttonSubmit)}var t,n;return t=e,(n=[{key:"setEventListeners",value:function(){this._formElement.addEventListener("submit",this._handleFormSubmit),this._formElement.addEventListener("input",this._handleFormInput)}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this.popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this.popup.classList.remove("popup_opened"),this.popup.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this.popup.addEventListener("mousedown",(function(t){(t.target===t.currentTarget||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&c(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=d(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},f.apply(this,arguments)}function d(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_(e)););return e}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function y(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function _(e){return _=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},_(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_(r);if(o){var n=_(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return y(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._callbackSubmitForm=e,n._inputList=n.popup.querySelectorAll(".popup__name"),n._form=n.popup.querySelector(".popup__container"),n}return t=a,(n=[{key:"close",value:function(){f(_(a.prototype),"close",this).call(this),this._form.reset()}},{key:"_getInputValues",value:function(){var e=this;return this.values={},this._inputList.forEach((function(t){e.values[t.name]=t.value})),this.values}},{key:"setEventListeners",value:function(){var e=this;f(_(a.prototype),"setEventListeners",this).call(this),this.popup.addEventListener("submit",(function(t){t.preventDefault(),e._callbackSubmitForm(e._getInputValues())}))}}])&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=w(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},g.apply(this,arguments)}function w(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}function S(e,t){return S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},S(e,t)}function k(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function E(e){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},E(e)}var O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return k(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._imagePopup=t.popup.querySelector(".popup-fullscreen__image"),t._titlePopup=t.popup.querySelector(".popup-fullscreen__title"),t}return t=a,(n=[{key:"open",value:function(e,t){this._imagePopup.src=t,this._imagePopup.alt=e,this._titlePopup.textContent=e,g(E(a.prototype),"open",this).call(this)}}])&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=t,this._containerSelector=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderSection",value:function(){var e=this;J.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._containerSelector.append(e)}},{key:"addItemSubmit",value:function(e){this._containerSelector.prepend(e)}}])&&P(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var j=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=document.querySelector(t),this._profileStatus=document.querySelector(n),this._prifileAvatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this.values={name:this._profileName.textContent,status:this._profileStatus.textContent},this.values}},{key:"setUserInfo",value:function(e,t){this._profileName.textContent=e,this._profileStatus.textContent=t}},{key:"setUserAvatar",value:function(e){this._prifileAvatar.src=e}}])&&C(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var I=function(){function e(t){var n=t.url,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=n,this._headers=r}var t,n;return t=e,(n=[{key:"_getResponseData",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getUserInfo",value:function(){var e=this;return fetch("https://nomoreparties.co/v1/cohort-41/users/me",{method:"GET",headers:this._headers}).then((function(t){return e._getResponseData(t)}))}},{key:"getInitialCards",value:function(){var e=this;return fetch(this._url+"cards",{method:"GET",headers:this._headers}).then((function(t){return e._getResponseData(t)}))}},{key:"editUserInfo",value:function(e,t){var n=this;return fetch(this._url+"users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((function(e){return n._getResponseData(e)}))}},{key:"createCard",value:function(e,t){var n=this;return fetch(this._url+"cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:"".concat(e),link:"".concat(t),likes:[]})}).then((function(e){return n._getResponseData(e)}))}},{key:"likeCard",value:function(e){var t=this;return fetch(this._url+"cards/".concat(e,"/likes"),{method:"PUT",headers:this._headers}).then((function(e){return t._getResponseData(e)}))}},{key:"deleteLikeCard",value:function(e){var t=this;return fetch(this._url+"cards/".concat(e,"/likes"),{method:"DELETE",headers:this._headers}).then((function(e){return t._getResponseData(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch(this._url+"cards/".concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return t._getResponseData(e)}))}},{key:"changePhotoProfile",value:function(e){var t=this;return fetch(this._url+"users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:"".concat(e)})}).then((function(e){return t._getResponseData(e)}))}}])&&q(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),R=(document.querySelector(".elements"),document.querySelector(".profile__name"),document.querySelector(".profile__status"),document.querySelector(".profile__avatar")),T=document.querySelector(".profile__button"),D=document.querySelector(".popup-add-element__container"),x=document.querySelector(".profile__change-avatar"),U=document.querySelector(".profile__edit"),A=document.querySelector(".profile-popup__container"),B=document.querySelector("#popup-status"),N=document.querySelector("#popup-name"),F=document.querySelector(".profile__box-avatar"),V=document.querySelector(".popup-edit-avatar__container"),H=(document.querySelector(".popup-edit-avatar__button"),""),J=[],G=new v((function(e){K(!0,".popup-edit-avatar__button"),z.changePhotoProfile(e["popup-edit-avatar-src"]).then((function(){X.setUserAvatar(e["popup-edit-avatar-src"]),G.close()})).catch((function(e){console.log(e)})).finally((function(){K(!1,".popup-edit-avatar__button")}))}),".popup-edit-avatar");G.setEventListeners(),F.addEventListener("click",(function(){ee.setSubmitButtonState(),G.open()})),F.addEventListener("mouseout",(function(){x.style.display="none",R.style.opacity="1"})),F.addEventListener("mouseover",(function(){x.style.display="block",R.style.opacity="0.6"}));var z=new I({url:"https://mesto.nomoreparties.co/v1/cohort-41/",headers:{authorization:"a8fa9cc1-52e1-4272-a720-87f73d0acb6d","content-type":"application/json"}});z.getInitialCards().then((function(e){return J=e})).then((function(){Q.renderSection()})).catch((function(e){console.log(e)}));var M=new l(".popup-delete-card");function K(e,t){document.querySelector(t).textContent=e?"Сохранение...":"Сохранить"}M.setEventListeners(),z.getUserInfo().then((function(e){return X.setUserInfo(e.name,e.about),X.setUserAvatar(e.avatar),H=e._id})).catch((function(e){console.log(e)}));var Q=new L((function(e){Q.addItem($(e.name,e.link,e.likes.length,e._id,e.owner._id,e.likes))}),".elements"),W=new v((function(e){K(!0,".profile-popup__button"),z.editUserInfo(W.values["popup-name"],W.values["popup-status"]).then((function(){X.setUserInfo(e["popup-name"],e["popup-status"]),W.close()})).catch((function(e){console.log(e)})).finally((function(){K(!1,".profile-popup__button")}))}),".profile-popup");W.setEventListeners();var X=new j(".profile__name",".profile__status",".profile__avatar"),Y=new O(".popup-fullscreen");Y.setEventListeners();var Z=new v((function(e){K(!0,".popup-add-element__button"),z.createCard(e["popup-add-element-name"],e["popup-add-element-src"]).then((function(){Z.close(),Q.addItemSubmit($(e["popup-add-element-name"],e["popup-add-element-src"]))})).catch((function(e){console.log(e)})).finally((function(){K(!1,".popup-add-element__button")}))}),".popup-add-element");function $(e,t,n,o,i,a){var u=new r(e,t,".template",(function(){Y.open(e,t)}),n,i,a,(function(){M.open(),document.querySelector(".popup-delete-card__button").addEventListener("click",(function(){z.deleteCard(o).then((function(){u.removeElement(),M.close()})).catch((function(e){M.close(),console.log(e,"удаление карточки без присвоенного ID")}))}))}),(function(e){e.target.classList.toggle("element__like_active"),e.target.classList.contains("element__like_active")?z.likeCard(o).then((function(){u.view.querySelector(".element__number").textContent++})).catch((function(e){console.log(e,"не присвоен ID")})):z.deleteLikeCard(o).then((function(){u.view.querySelector(".element__number").textContent--})).catch((function(e){console.log(e,"не присвоен ID")}))}));return u.createCard()}Z.setEventListeners(),U.addEventListener("click",(function(){var e=X.getUserInfo();N.value=e.name,B.value=e.status,te.setSubmitButtonState(),W.open()})),T.addEventListener("click",(function(){ne.setSubmitButtonState(),Z.open()}));var ee=new u(o,V),te=new u(o,A),ne=new u(o,D);te.setEventListeners(),ne.setEventListeners(),ee.setEventListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,